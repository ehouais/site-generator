<%#
stylesheets[]
config
type
gistIdStorageId
cipherKeyStorageId
githubPwdStorageId
%>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
        <script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.3.3/require.min.js"></script>
<% stylesheets.forEach(function(url) { -%>
        <link href="<%= url %>" rel="stylesheet">
<% }); -%>
        <link href="README.md" rel="doc">
        <style>
            html, body {
                height: 100%;
                margin: 0;
                overflow: hidden;
                background-color: #fff;
            }
        </style>
    </head>
    <body>
        <script>
            var config = <%- JSON.stringify(config) %>;
            config.config = {text: {useXhr: function(url, protocol, hostname, port) {
                return true; // force use of CORS for text dependencies
            }}};
            require.config(config);

            var params = (function(uri) {
                    var a = document.createElement('a');
                    a.href = uri;
                    return a.search.replace(/^\?/, '').split('&').reduce(function(obj, pair) {
                        var tokens = pair.split('=');
                        obj[tokens[0]] = decodeURIComponent(tokens[1]);
                        return obj;
                    }, {});
                })(window.location.href);
            var layout = params.layout;
            var data = params.data;

            require(['chart'], function(Chart) {
                var chart,
                    parse = function(str, cb) {
<% if (['vbars', 'hbars', 'pie', 'lines', 'map'].indexOf(type) != -1) { %>
                        require(['datatable'], function(DataTable) {
                            var lines = str.split('\n'),
                                header = lines.shift(),
                                types = [<% if (type == 'lines') { %>'date'<% } else if (type == 'map') { %>'numeric', 'numeric', 'text'<% } else { %>'text'<% } %>];

                            cb({
                                cols: header.split(',').map(function(cell) {
                                    return {label: cell};
                                }),
                                rows: DataTable.dataFromCsv(lines.join('\n'), types)
                            });
                        });
<% } else if (type == 'diagram' || type == 'timeline') { %>
                        //if (uri) data = data.replace(/\n|\r/g, '');
                        require(['ext_parser'], function(parser) {
                            try {
                                cb(parser.parse(str));
                            } catch(e) {
                                console.log('Parser error: '+e.message);
                            }
                        });
<% } %>
                    },
                    params = {margin: 0.05};

<% if (type == 'vbars' || type == 'hbars') { -%>
                if (layout) {
                    (function(str) {
                        var tokens = str.split(':'),
                            cols = tokens[1].split(',');

                        params.labels = +tokens[0]-1;
                        params.grouping = cols.map(function(stack) {
                            return stack.split('+').map(function(index) {
                                return +index-1;
                            });
                        });
                    })(layout);
                }
<% } else if (type == 'lines') { %>
                params.offset = layout ? +layout : 0;
<% } -%>

                chart = Chart(document.body, params);

                window.addEventListener('resize', chart.resize);

                var match,
                    str,
                    update = function(data) {
                        chart.update(data);
                    },
                    debounce = function(func, wait, immediate) {
                        var timeout;
                        return function() {
                            var context = this, args = arguments;
                            var later = function() {
                                timeout = null;
                                if (!immediate) func.apply(context, args);
                            };
                            var callNow = immediate && !timeout;
                            clearTimeout(timeout);
                            timeout = setTimeout(later, wait);
                            if (callNow) func.apply(context, args);
                        };
                    };
                    Cache = function(id, cb, delay) {
                        var debounced = debounce(cb, delay);

                        return function(data) {
                            localStorage.setItem(id, data);
                            debounced(data);
                        };
                    };

                if (match = data.match(/^data:([^,;]+)(;[^,]+)?,(.*)/)) {
                    str = decodeURIComponent(match[3]);
                    if (match[1] == 'text/csv') {
                        str = str.replace(/;/g, '\n');
                    }
                    parse(str, update);
                } else if (data.match(/^https?:/)) {
                    require(['http', 'on-demand', 'crypto'], function(Http, OnDemand, crypto) {
                        var uri = data,
                            cipherKey = OnDemand(sessionStorage, '<%- cipherKeyStorageId %>');

                        Http.get(uri, function(data) {
                            parse(crypto.decipher(cipherKey, data), update);
                        }, true);

                        chart.onchange && chart.onchange(Cache('dataCache', function(data) {
                            Http.put(uri, crypto.cipher(cipherKey, data), true);
                        }, 5000));
                    });
                } else if (match = data.match(/db\/(.+)/)) {
                    require(['gist-fs', 'on-demand', 'crypto'], function(GistFs, OnDemand, crypto) {
                        var id = match[1],
                            fs = GistFs(
                                'ehouais',
                                OnDemand(sessionStorage, '<%- githubPwdStorageId %>'),
                                OnDemand(localStorage, '<%- gistIdStorageId %>')
                            ),
                            cipherKey = OnDemand(sessionStorage, '<%- cipherKeyStorageId %>');

                        fs.get(id, function(data) {
                            parse(crypto.decipher(cipherKey, data.content), update);
                        });

                        chart.onchange && chart.onchange(Cache('dataCache', function(data) {
                            fs.update(id, crypto.cipher(cipherKey, data));
                        }, 5000));
                    });
                } else {
                    parse(data, update);
                }
            });
        </script>
    </body>
</html>
