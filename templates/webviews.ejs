<%#
datalibVersion
mlabApiKeyIdStorageId
cipherKeyStorageId
%>
<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.3.2/require.min.js"></script>
<script>
    require.config({
        baseUrl: '/assets',
        paths: {
            http: 'js-data-libs/<%- datalibVersion %>/http',
            sjcl: '//cdnjs.cloudflare.com/ajax/libs/sjcl/1.0.6/sjcl.min',
            'mlab-db': 'js-data-libs/<%- datalibVersion %>/mlab-db',
            'on-demand': 'js-data-libs/<%- datalibVersion %>/on-demand',
            crypto: 'js-data-libs/<%- datalibVersion %>/crypto'
        },
        shim: {sjcl: {exports: 'sjcl'}},
        config: {
            text: {
                useXhr: function(url, protocol, hostname, port) {
                    return true; // force use of CORS for text dependencies
                }
            }
        }
    });

    var param = (function(uri) {
            var a = document.createElement('a');
            a.href = uri;
            return a.search.replace(/^\?/, '').split('&').reduce(function(obj, pair) {
                var tokens = pair.split('=');
                obj[tokens[0]] = decodeURIComponent(tokens[1]);
                return obj;
            }, {});
        })(window.location.href).data,
        match = param.match(/db\/(.+)/),
        id = match[1];

    Webviews = (function() {
        var handler,
            debounce = function(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this, args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);
                };
            },
            load = function() {
                require(['mlab-db', 'on-demand', 'crypto'], function(MlabDb, OnDemand, crypto) {
                    var apiKey = OnDemand(localStorage, '<%- mlabApiKeyStorageId %>'),
                        db = MlabDb({apikey: apiKey(), database: '', collection: ''}),
                        cipherKey = OnDemand(sessionStorage, '<%- cipherKeyStorageId %>');

                    db.get(id, function(data) {
                        handler(crypto.decipher(cipherKey(), data.content));
                    });
                });
            },
            save = debounce(function(data) {
                require(['mlab-db', 'on-demand', 'crypto'], function(MlabDb, OnDemand, crypto) {
                    var apiKey = OnDemand(localStorage, '<%- mlabApiKeyStorageId %>'),
                        db = MlabDb({apikey: apiKey(), database: '', collection: ''}),
                        cipherKey = OnDemand(sessionStorage, '<%- cipherKeyStorageId %>');

                    db.update(id, crypto.cipher(cipherKey(), data), function() {
                        console.log('saved.');
                    });
                });
            }, 5000),
            data = {
                bind: function(cb) {
                    handler = cb;
                    load();
                },
                save: function(data) {
                    save(data);
                    handler(data);
                },
                trigger: function() {}
            };

        return {
            data: function() {
                return data;
            }
        }
    })();
</script>
