<%#
datalibVersion
uiutilslibVersion
cipherKeyStorageId
mlabApiKeyIdStorageId
%>
<html>
    <head>
        <meta charset="utf-8">
        <script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.3.2/require.min.js"></script>
        <link href="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
        <style>
            .file, textarea[name="value"] {
                font-family: 'courier new';
            }
            .file {
                padding: 2px 6px;
                font-size: 13px;
            }
            textarea[name="value"] {
                font-size: 12px;
                white-space: pre;
                resize: none;
                word-wrap: normal;
                height: 600px;
                margin-bottom: 10px;
            }
            #list {
                margin-top: 15px;
            }
            #list .list-group {
                max-height: 600px;
                overflow-y: auto;
            }
            #list .file {
                cursor: pointer;
            }
            #list .file:hover {
                background-color: #fee;
            }
            #list .file.selected {
                background-color: #fdd;
            }
            .buttons button {
                margin-left: 4px;
            }
            .buttons button:first-child {
                margin-left: 0;
            }
            button.new {
                width: 100%;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="page-header">
                <h1>mlab-based data storage with client-side encryption</h1>
            </div>
            <div class="row">
                <div class="col-lg-9">
                    <form class="form-horizontal" role="form">
                        <input type="hidden" name="id"/>
                        <textarea class="form-control" name="value" rows="20"></textarea>
                        <div class="buttons">
                            <button type="button" class="btn btn-success pull-left update">Update</button>
                            <button type="button" class="btn btn-danger pull-right delete">Delete</button>
                            <button type="button" class="btn btn-default pull-right reset">Reset</button>
                        </div>
                    </form>
                </div>
                <div class="col-lg-3">
                    <button type="button" class="btn btn-success new">New file</button>
                    <div id="list">
                        <div class="list-group">
                            <div class="list-group-item file" template-id="data-uri"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script>
            require.config({
                baseUrl: '/assets',
                paths: {
                    'immutable': '//cdnjs.cloudflare.com/ajax/libs/immutable/3.8.1/immutable.min',
                    'sjcl': '//cdnjs.cloudflare.com/ajax/libs/sjcl/1.0.6/sjcl.min',
                    'observable': 'js-data-libs/<%- datalibVersion %>/observable',
                    'streams': 'js-data-libs/<%- datalibVersion %>/streams',
                    'http': 'js-data-libs/<%- datalibVersion %>/http',
                    'ui-utils': 'js-ui-utils/<%- uiutilslibVersion %>/ui-utils',
                    'mlab-db': 'js-data-libs/<%- datalibVersion %>/mlab-db',
                    'on-demand': 'js-data-libs/<%- datalibVersion %>/on-demand',
                    'crypto': 'js-data-libs/<%- datalibVersion %>/crypto',
                },
                shim: {
                    'sjcl': {
                        exports: 'sjcl'
                    }
                },
            });

            require(['ui-utils', 'streams', 'mlab-db', 'on-demand', 'crypto'], function($, Stream, MlabDb, OnDemand, crypto) {
                var templates = $.extract('template-id'),
                    apiKey = OnDemand(localStorage, '<%- mlabApiKeyStorageId %>'),
                    db = MlabDb({apikey: apiKey(), database: 'misc', collection: 'webviews'}),
                    localKey = OnDemand(sessionStorage, '<%- cipherKeyStorageId %>'),
                    current = Stream(),
                    list = Stream(),
                    refreshList = function() {
                        db.get({filter: {id: 1}}, function(docs) {
                            list.push(docs.map(function(doc) {
                                return doc.id;
                            }));
                            current.push();
                        });
                    };

                // "New" button
                $.UI($.select('button.new'), function(createDoc) {
                    this.addEventListener('click', function(e) {
                        var name = window.prompt('Enter data name');
                        if (name) createDoc(name, JSON.parse(crypto.cipher(localKey(), '')));
                    });
                }).activate(
                    function(id, text) {
                        db.create({id: id, value: text}, refreshList);
                    }
                );

                // file list
                $.UI($.select('#list'), function(list_, selected_, selectDoc) {
                    var $list = $.select('.list-group', this);

                    list_.bind($.toNodes($list, $.template(templates['data-uri'], function(id) {
                        this.textContent = id;
                        this.setAttribute('data-filename', id);
                    })));

                    selected_.bind(function(id) {
                        var $current = $.select('.selected', $list);
                        $current && $current.classList.remove('selected');
                        var $selected = $.select('[data-filename="'+id+'"]', $list);
                        $selected && $selected.classList.add('selected');
                    });

                    $list.addEventListener('click', $.delegate('.file', function(e) {
                        selectDoc(this.getAttribute('data-filename'));
                        e.preventDefault();
                    }));
                }).activate(
                    list.output(),
                    current.output(),
                    function(id) {
                        current.push(id);
                    }
                );

                // form
                $.UI($.select('form'), function(data_, saveDoc, deleteDoc, reset) {
                    var $hidden = $.select('input[type="hidden"]', this),
                        $textarea = $.select('textarea[name="value"]', this),
                        $btns = $.select('.buttons', this);
                        $update = $.select('.update', $btns),
                        $reset = $.select('.reset', $btns),
                        $delete = $.select('.delete', $btns),
                        updateBtns = function(enabled) {
                            $update.setAttribute('disabled', 'disabled');
                            $.toggleAttribute($reset, 'disabled', !enabled && 'disabled');
                            $.toggleAttribute($delete, 'disabled', !enabled && 'disabled');
                        },
                        update = function(data) {
                            var enabled = data && data.has('text');
                            $hidden.value = data && data.get('id');
                            $.toggleAttribute($textarea, 'disabled', !enabled && 'disabled');
                            $textarea.value = enabled ? data.get('text') : '';
                            updateBtns(enabled);
                        };

                    update();

                    data_.bind(update);

                    $textarea.addEventListener('input', function() { // TODO: improve dependency to $textarea
                        $update.removeAttribute('disabled');
                    });
                    $update.addEventListener('click', function(e) {
                        saveDoc($hidden.value, crypto.cipher(localKey(), $textarea.value), function() {
                            updateBtns(true);
                        });
                    });
                    $reset.addEventListener('click', function(e) {
                        reset();
                    });
                    $delete.addEventListener('click', function(e) {
                        window.confirm('Are you sure ?') && deleteDoc($hidden.value);
                    });
                }).activate(
                    current.output().amap(function(id, cb) {
                        if (id) {
                            db.get({query: {"id": id}, unique: true}, function(doc) {
                                cb({id: id, text: crypto.decipher(localKey(), JSON.stringify(doc.value))});
                            });
                        } else {
                            cb();
                        }
                    }),
                    function(id, text, cb) {
                        db.update({id: id}, {$set: {value: JSON.parse(text)}}, cb);
                    },
                    function(id) {
                        db.delete({id: id}, refreshList);
                    },
                    function() {
                        current.push();
                    }
                );

                refreshList();
            });
        </script>
    </body>
</html>
